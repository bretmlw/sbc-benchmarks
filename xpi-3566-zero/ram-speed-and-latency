==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Test result is the best of repeated runs. Number of repeats  ==
==         is shown in brackets                                         ==
== Note 3: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 4: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 5: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                 :   1823.8 MB/s (3, 14.6%)
 C copy backwards (32 byte blocks)                :   1797.9 MB/s (2)
 C copy backwards (64 byte blocks)                :   1775.8 MB/s (2)
 C copy                                           :   2843.3 MB/s (3, 0.1%)
 C copy prefetched (32 bytes step)                :   1714.3 MB/s (2)
 C copy prefetched (64 bytes step)                :   2688.7 MB/s (3, 0.4%)
 C 2-pass copy                                    :   1805.0 MB/s (3, 1.2%)
 C 2-pass copy prefetched (32 bytes step)         :   1073.6 MB/s (3)
 C 2-pass copy prefetched (64 bytes step)         :   1647.1 MB/s (3, 0.2%)
 C scan 8                                         :    447.2 MB/s (2)
 C scan 16                                        :    888.5 MB/s (2)
 C scan 32                                        :   1755.0 MB/s (3, 0.1%)
 C scan 64                                        :   3333.1 MB/s (2)
 C fill                                           :   7559.7 MB/s (2)
 C fill (shuffle within 16 byte blocks)           :   7589.0 MB/s (3, 0.3%)
 C fill (shuffle within 32 byte blocks)           :   7597.8 MB/s (3, 1.0%)
 C fill (shuffle within 64 byte blocks)           :   7559.2 MB/s (3, 0.2%)
 ---
 libc memcpy copy                                 :   2824.2 MB/s (2)
 libc memchr scan                                 :   3167.7 MB/s (3, 0.3%)
 libc memset fill                                 :   7600.0 MB/s (3, 0.3%)
 ---
 NEON LDP/STP copy                                :   2843.3 MB/s (3, 0.1%)
 NEON LDP/STP copy pldl2strm (32 bytes step)      :   2215.2 MB/s (3, 0.2%)
 NEON LDP/STP copy pldl2strm (64 bytes step)      :   2694.5 MB/s (2)
 NEON LDP/STP copy pldl1keep (32 bytes step)      :   2065.7 MB/s (3, 2.2%)
 NEON LDP/STP copy pldl1keep (64 bytes step)      :   2874.9 MB/s (3, 0.3%)
 NEON LD1/ST1 copy                                :   2849.9 MB/s (3, 0.2%)
 NEON LDP load                                    :   5904.4 MB/s (2)
 NEON LDNP load                                   :   6114.1 MB/s (2)
 NEON STP fill                                    :   7603.2 MB/s (3, 6.3%)
 NEON STNP fill                                   :   1997.8 MB/s (3, 5.0%)
 ARM LDP/STP copy                                 :   2848.1 MB/s (3, 0.3%)
 ARM LDP load                                     :   5921.8 MB/s (3, 0.2%)
 ARM LDNP load                                    :   6114.4 MB/s (2)
 ARM STP fill                                     :   7559.9 MB/s (2)
 ARM STNP fill                                    :   1997.5 MB/s (3, 4.0%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.6 ns          /     0.4 ns 
     32768 :    4.2 ns          /     5.3 ns 
     65536 :    9.2 ns          /    13.6 ns 
    131072 :   12.9 ns          /    16.6 ns 
    262144 :   15.7 ns          /    18.1 ns 
    524288 :   30.1 ns          /    41.3 ns 
   1048576 :   91.2 ns          /   135.0 ns 
   2097152 :  130.9 ns          /   172.6 ns 
   4194304 :  150.4 ns          /   185.6 ns 
   8388608 :  168.0 ns          /   200.5 ns 
  16777216 :  178.8 ns          /   209.6 ns 
  33554432 :  184.5 ns          /   216.4 ns 
  67108864 :  185.8 ns          /   220.1 ns 

##########################################################################

Executing ramlat on cpu0 (Cortex-A55), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 1.677 1.665 1.666 1.656 1.101 1.652 2.242 4.517 
         8k: 1.651 1.650 1.649 1.651 1.101 1.651 2.245 4.512 
        16k: 1.649 1.654 1.651 1.652 1.101 1.652 2.238 4.516 
        32k: 1.694 1.658 1.693 1.661 1.106 1.659 2.251 4.527 
        64k: 15.28 17.53 15.16 17.53 14.78 17.47 28.12 51.38 
       128k: 18.09 18.44 18.10 18.52 17.06 18.42 32.46 62.09 
       256k: 18.52 18.72 18.52 18.72 17.76 18.82 31.69 63.67 
       512k: 34.86 48.54 34.83 52.80 40.16 44.52 71.34 131.6 
      1024k: 115.5 131.4 111.0 129.4 127.3 131.6 198.0 377.8 
      2048k: 150.9 153.1 148.3 153.2 149.0 156.1 230.1 426.8 
      4096k: 167.5 167.3 163.2 165.4 164.5 166.9 239.9 439.2 
      8192k: 174.7 178.5 174.7 175.3 174.8 175.3 243.1 450.5 
     16384k: 181.9 184.9 181.7 182.6 181.5 182.6 247.6 460.0 
     32768k: 191.8 197.3 191.9 192.9 191.4 192.7 251.6 469.7 
     65536k: 196.2 201.4 204.6 196.4 194.8 195.8 251.3 470.1 
    131072k: 199.9 198.9 195.7 224.3 195.5 197.8 255.3 473.0 

##########################################################################
